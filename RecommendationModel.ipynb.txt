{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dIm1eTVwQgLP",
        "outputId": "24aa79f9-8710-4db2-90f7-143486ac6d95",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "#%pip install nltk\n",
        "#%pip install --upgrade pip\n",
        "#nltk.download('wordnet')\n",
        "#nltk.download('punkt')\n",
        "#nltk.download('stopwords')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {},
      "outputs": [],
      "source": [
        "import pickle\n",
        "with open(\"data.pkl\", \"rb\") as f:\n",
        "    questions_matrix, data, best_num_clusters, tfidf_vectorizer = pickle.load(f)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "wQ1LAQVSQgLP",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import re\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "from nltk.tokenize import word_tokenize\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "def preprocess_question(user_question):\n",
        "    # Convertir la question en minuscules\n",
        "    user_question = user_question.lower()\n",
        "\n",
        "    # Supprimer la ponctuation\n",
        "    user_question = re.sub(r'[^\\w\\s]', '', user_question)\n",
        "\n",
        "    # Tokenization\n",
        "    tokens = word_tokenize(user_question)\n",
        "\n",
        "    # Supprimer les mots vides (stop words)\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    tokens = [word for word in tokens if word not in stop_words]\n",
        "\n",
        "    # Lemmatization\n",
        "    lemmatizer = WordNetLemmatizer()\n",
        "    tokens = [lemmatizer.lemmatize(word) for word in tokens]\n",
        "\n",
        "    # Reconstruire la question à partir des tokens lemmatisés\n",
        "    processed_question = ' '.join(tokens)\n",
        "\n",
        "    return processed_question"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "mI6qfRjEQgLQ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "user_question = preprocess_question(user_question) # type: ignore"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "JAb4usGlQgLQ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import MiniBatchKMeans\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "import pandas as pd"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AuhE_RbNQgLQ",
        "outputId": "d79f2d4e-f64d-4978-afbf-cc3662bf3d69",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(1, 67259)\n",
            "(43541, 67259)\n"
          ]
        }
      ],
      "source": [
        "user_question_vector = tfidf_vectorizer.transform([user_question])\n",
        "\n",
        "print(user_question_vector.shape)\n",
        "print(questions_matrix.shape)\n",
        "\n",
        "cluster_similarities = cosine_similarity(user_question_vector, questions_matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2reYuj8DQgLQ",
        "outputId": "28e3326a-4830-4145-811d-c3123ec65e9c",
        "trusted": true
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([1.        , 1.        , 0.02705836, ..., 0.03233996, 0.01367622,\n",
              "       0.0063367 ])"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cluster_similarities.flatten()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "DyaT2VrpQgLQ",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "cosine_similarities = cosine_similarity(user_question_vector, questions_matrix).flatten()\n",
        "similarities_data = pd.DataFrame({\n",
        "    'question_id': data['question_id'],\n",
        "    'similarity': cosine_similarities,\n",
        "    'cluster': data['cluster'],\n",
        "    'answer_id': data['answer_id']\n",
        "})"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 175
        },
        "id": "293ZMacdQgLR",
        "outputId": "6df48d8a-fecf-43f3-c9f9-cc8b26ba037c",
        "trusted": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>question_id</th>\n",
              "      <th>similarity</th>\n",
              "      <th>cluster</th>\n",
              "      <th>answer_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>49549</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>49597</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>49549</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>3</td>\n",
              "      <td>49579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>50176</td>\n",
              "      <td>0.027058</td>\n",
              "      <td>5</td>\n",
              "      <td>50181</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>102782</td>\n",
              "      <td>0.034015</td>\n",
              "      <td>3</td>\n",
              "      <td>102802</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   question_id  similarity  cluster  answer_id\n",
              "0        49549    1.000000        3      49597\n",
              "1        49549    1.000000        3      49579\n",
              "2        50176    0.027058        5      50181\n",
              "3       102782    0.034015        3     102802"
            ]
          },
          "execution_count": 9,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "similarities_data.head(4)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9V2bT-BOQgLR",
        "outputId": "acb28bba-9fe4-4259-fb3f-83a599365a16",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Top 10 similar questions:\n",
            "       question_id  similarity  cluster  answer_id\n",
            "0            49549    1.000000        3      49597\n",
            "1            49549    1.000000        3      49579\n",
            "486          46668    0.392141        1     102099\n",
            "487          46668    0.392141        1      46676\n",
            "488          46668    0.392141        1      46669\n",
            "18985        65208    0.297674        1      65209\n",
            "18982        65208    0.297674        1      65262\n",
            "18984        65208    0.297674        1      65211\n",
            "18983        65208    0.297674        1      65222\n",
            "8295         88531    0.294204        1      88532\n"
          ]
        }
      ],
      "source": [
        "print(\"Top 10 similar questions:\")\n",
        "print(similarities_data.sort_values(by='similarity', ascending=False).head(10))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MeVHw6wCQgLR",
        "outputId": "864723f5-9d38-4fe9-d61f-c2062fcd5287",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Predicted cluster for the new question: 3.0\n"
          ]
        }
      ],
      "source": [
        "# Trouver la question la plus similaire\n",
        "most_similar_question = similarities_data.loc[similarities_data['similarity'].idxmax()]\n",
        "\n",
        "# Cluster du question la plus similaire\n",
        "predicted_cluster = most_similar_question['cluster']\n",
        "print(f\"Predicted cluster for the new question: {predicted_cluster}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "6L9JrV6GQgLR",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "# Récupération des réponses du cluster prédit\n",
        "cluster_responses = data[data['cluster'] == predicted_cluster]\n",
        "\n",
        "# Calcul de la similarité entre la nouvelle question et les questions du cluster\n",
        "cluster_cosine_similarities = cosine_similarity(user_question_vector, tfidf_vectorizer.transform(cluster_responses['body_x'])).flatten()\n",
        "\n",
        "# Ajout des similarités au DataFrame du cluster\n",
        "cluster_responses = cluster_responses.assign(similarity=cluster_cosine_similarities)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qWDdLgPAQgLS",
        "outputId": "eb67939f-4781-49a2-f338-c19deb9e5450",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Similarities within the predicted cluster:\n",
            "                                                  body_x  similarity\n",
            "0      far know country extraterritorial jurisdiction...    1.000000\n",
            "1      far know country extraterritorial jurisdiction...    1.000000\n",
            "11497  let say plaintiff life uk published literary w...    0.163825\n",
            "32132  read news u federal judge ordered north korea ...    0.162498\n",
            "18184  court accept evidence produced another country...    0.161112\n",
            "40140  referring oj case civil court legitimate court...    0.152903\n",
            "40139  referring oj case civil court legitimate court...    0.152903\n",
            "13598  witness appear via zoom due another country re...    0.152732\n",
            "35950  mobile phone precious thing stolen friend poli...    0.144824\n",
            "27562  person wrong person b case end court whole dif...    0.133677\n"
          ]
        }
      ],
      "source": [
        "print(\"Similarities within the predicted cluster:\")\n",
        "print(cluster_responses[['body_x', 'similarity']].sort_values(by='similarity', ascending=False).head(10))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jXSe2RqLQgLS",
        "outputId": "90136141-7338-4c1f-e226-cddbfc972064",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Les réponses recommandées sont:\n",
            ":\n",
            "1. Generally extraterritorial jurisdiction act a a backup If the Italian court want to prosecute the US will not claim jurisdiction And if the Italians do not want to prosecute theyre unlikely to extradite the offender either Now for physical crime the location of the act make it generally obvious which jurisdiction take precedence but for online crime this can be le transparent but a country that ha arrested the offender and want to try the crime probably still get precedence\n",
            "*************************************************\n",
            "\n",
            "2. Extraterritorial jurisdiction will come into play only for certain citizen in other country For example military personnel stationed in another ally country may or may not be subject to local law for all offense This will be set by agreement between the two nation There are certainly law that apply to US citizen even when they are abroad There are also US law that are used to enforce antiterrorism measure across the globe though that enforcement is generally via military might However there are no law that affect foreign national in their home country for normal criminal offense Moreover very few sovereign nation would allow a foreign court authority over their citizen for event that occur within it border In your example the only jurisdiction is the appropriate one in Italy It is possible that there have been instance of defendant being sent outside of a country for trial but this would be a diplomatic solution not a jurisdictional one\n",
            "*************************************************\n",
            "\n",
            "3. You forgot an element of criminal copyright infringement a minimum amount of copying I believe the US statute specifies at least 1000 worth of copied work within a 6month period but by policy the DOJ doe not prosecute unless the matter is much bigger than that A matter of terminology criminal charge are not quotsettledquot They are prosecuted leading either to a trial or a pleabargain If not prosecuted charge are dropped Any country where infringing product are produced or distributed may choose to prosecute criminal infringement However the country where the product are produced and thus where the criminal or some of them are located ha an advantage in arresting them and bringing them to trial Thus the country of production is often the one to do any prosecuting that get done However often such criminal choose a country with a relatively weak lawenforcement system or one that doe not much care about enforcing foreign to it copyright to operate in Thus the the country that could arrest the criminal doesnt and the country that might want to cant get hold of them International criminal copyright prosecution are I believe rather rare As a practical matter almost all copyright enforcement is by private suit not criminal prosecution Since each country ha jurisdiction on the infringement happen within their country doe the mean the criminal case to be settled in each 179 country If that is the case then dont you think this increase the paperwork There is no need to quotsettlequot the case in every or indeed in any jurisdiction Any country where a criminal act occurred may prosecute if it chooses In practice few if any will choose to do so Can matter like this only be settled from only one country plaintiff or defendant No several country can bring case if they so choose There is no such thing a double jeopardy between separate country unless an agreement specifies that there is and that is not common Such country may need to negotiate over possession of individual defendant If country A ha arrested Joe Thug country B may not be able to try Joe without the cooperation of country A Corporate defendant are of course always available But unless they have an agreement not to do so multiple country may legally try Joe or Infringements inc for copyright infringement Whether they will do so is another matter\n",
            "*************************************************\n",
            "\n",
            "4. Without regard to the actual case and the particular country involved I am wondering how it is even possible that a court in one country order the whole another country to do something let alone when the two country do not even formally have diplomatic relation The main statute that is relevant in the US is the Foreign Sovereign Immunities Act FISA of 1976 In general foreign state are immune from liability in US court and most court of the developed world subject to certain exception the most common of which are a follows Foreign state waif it immunity explicitly or implicitly Commercial activity by foreign state in or directly affecting the United States Property taken in violation of international law is at issue Rights in US property acquired by succession or gift or right in immovable property situated in the United States are at issue Money damage are sought against a foreign state for personal injury death or damage to or loss of property caused by it tortious act or omission occurring in the United States Enforcement of an arbitration agreement made by the foreign state with or for a private party Money damage are sought against a foreign state for personal injury or death that wa caused by an act of torture extrajudicial killing aircraft sabotage hostage taking or their support if the foreign state is a designated sponsor of terrorism Admiralty lawsuit to enforce a maritime lien against a vessel or cargo of the foreign state based on commercial activity The exception above in bold wa probably the one applied in the North Korean case The only country to which that exception applies are North Korea Syria Sudan and Iran There are also separate similar rule related to country with whom the US is in a declared war There is sporadic ongoing constitutional separation of power litigation in the US over whether a FISA authorized lawsuit can proceed over the objection of the President a expressed by the US State Department The argument that FISA is unconstitutional in this context is that diplomacy and foreign policy is exclusively an executive branch power to the exclusion of Congress and the judiciary but for the most part this extreme position ha been rejected in recent year A conservative US Supreme Court however could revisit this question conservative judge tend to favor more absolute executive branch authority in foreign affair Once a party win however the winner need to identify foreign asset subject to the jurisdiction of the court from which to collect the judgment such a gold deposit or US governmental or corporate bond or ship docked in US port owned by the country In strong contrast to the case above the UK medium recently overtly demonstrated disobedience of a New Zealand court name suppression order a man arrested in NZ for allegedly committing an appalling crime wa granted temporary name suppression and that wa ignored by the UK medium I am wondering if there is anything that would stop a New Zealand court to hold the UK to account just like the US court just did North Korea In the New Zealand case the remedy would be to bring suit against the particular newspaper or reporter involved rather than the state But the UK might not enforce those judgment if those defendant lost so enforcement might be limited to New Zealand based asset and person and then only if the New Zealand court found that it had jurisdiction over the defendant under New Zealand law So this isnt really analogous So in general are there any internationally recognised lawstreatiesprotocols etc that define ifwhen a court in one country can assert jurisdiction over the whole another country and hold it to account Or is that completely up to the court and whatever extreme it dare to come up with See above in the US case Most country have similar statute or case law to FISA which codified the case law applying customary international law at the time that it wa adopted One example that come into my mind is the European Court of Human Rights if a country signed the European Convention on Human Rights it can be held to account by the court But what convention if any can be applied to the two case above The European Court of Human Rights case is one of consent to the jurisdiction of an international body by treaty Countries like the UK and NZ have statute or treaty governing when a foreign judgment eg a judgment from a New Zealand court will be recognized domestically There are also usually law governing when people present in one state will be extradited to another usually in the form of a bilateral treaty between the affected state\n",
            "*************************************************\n",
            "\n",
            "5. Does a court have to accept evidence produced by another country if it becomes available during a trial For a Court it is not a matter of native or foreign evidence For a Court it is whether the evidence is admissible in law or inadmissible in law There are Rules for deciding the whether something is really evidence Hence for a Court first of all it must be an evidence may be audio visual document electronic document etc Then it must be admissible in law eg it must be the primary evidence ie the original piece of evidence It must not be a copy ie the secondary evidence Still if it is secondary evidence then it must conform to a legal standard eg authenticated by some Government officer After the level of admissibility then the next level is reliability Whether the evidence adduced by a party is reliable eg whether the will tendered in evidence is the latest will of the executant or not If a piece of information document electronic document audio or visual material produced in the Court satisfies these three condition ie Being an evidence Being admissible in law and Reliable a per law and fact Then that can be allowed by a Court Its foreign origin doe not vitiate it evidentiary value I am sorry I had not quoted the precise provision of law in support of this answer It is because I belong to a different jurisprudential system Exact provision may be different\n",
            "*************************************************\n",
            "\n",
            "6. California is a common law jurisdiction and is a direct descendent of English common law a are most exBritish colony See What different legalsystems are there In common law system there are two parallel legal system I actually think this is true in civil law system like Finlands a well Criminal law where the state ie the government prosecutes an alleged criminal and if they are convicted beyond reasonable doubt by a jury of their peer or more rarely a judge they are punished by deprivation of life in jurisdiction with capital punishment liberty including imprisonment community service etc andor by paying a fine to the government Civil law where a plaintiff bring a defendant before the court and seek restitution in the form of an order from the court for the defendant to do or stop doing something andor monetary damage The plaintiff need to prove the wrong on the balance of probabilitiesA private person can not punish another person for obvious reason Wrongs may be criminal or civil or both For example Speeding is an offence against the state unless you hit someone no one is harmed so it is not a civil wrong The state can prosecute you usually summarily by issuing a ticket but no one can sue you Breaking a contract is a wrong against the other party to the contract it is not a crime The other party can sue you but the state can not prosecute you Stealing from someone is both a crime larceny and a tort1 conversion The state can prosecute you and throw you in gaol and the person you stole from can sue you to have either their property returned or be paid compensation If you cause someone death then there may be crime usually murder or manslaughter or there may be no crime eg selling people cigarette Irrespective if you killed the person unjustifiably that person or more precisely their estateheirsdependents can sue you for compensation for their loss Specifically in the case of OJ Simpson he wa prosecuted for murder for which he wa acquitted ie he wa found not guilty and sued for wrongful death for which he wa found liable and ordered to pay damage A tort is a specific type of civil wrong under the equity part of the common law system a opposed to the common law part of the common law system\n",
            "*************************************************\n",
            "\n",
            "7. They are two different court with different standard of proof In a criminal court the standard of proof is guilty beyond any reasonable doubt In a civil court the standard of proof is more likely guilty than not guilty Actually in a civil court it not guilty it often liable for damage Its obvious that there will always be case where the evidence lie somewhere between these two Consider what the reason for both court case are In the first case it the state against you The state doesnt suffer any injustice if you are not convicted and the state is very powerful thats why the standard of proof is high In a civil court you have often two private person fighting it out If you are correctly accused of breaking my arm and I sue you for damage then if you are not convicted I am suffering a broken arm and all the associated pain and cost A standard a high a in a criminal court would be entirely unfair towards the victim\n",
            "*************************************************\n",
            "\n",
            "8. A warrant for the arrest of the person on contempt charge could be issued although this probably wouldnt be a valid basis for extradition and instead would only be enforced if that person came to a place where the court ha territorial jurisdiction The person held in contempt could be fined with the fine reduced to a money judgment and the judgment could be enforced against any asset or income of the person held in contempt that are or are in the future within the jurisdiction of the court The money judgment could also be domesticated to a jurisdiction where the witness ha asset to enforce the judgment through the local court there If the witness is a party to the case or is in some close relationship with a party to the case such that the party ought to be able to exert some control or influence of the witness sanction related to the case itself could be imposed The testimony of the witness could be disregarded a a sanction if appropriate If the witness were testifying involuntarily pursuant to letter rogatory which is basically a subpoena from a jurisdiction where the witness is not located that is domesticated in the jurisdiction where the witness is located by a local court in accordance with local law the court issuing the letter rogatory could sanction the witness according to domestic law for contempt of court for violating the command issued in connection with the letter rogatory A simple declaration that a person wa in contempt of court could sometimes have collateral consequence for that person for example in loan application or background check or violating the term of some contract that wa the basis of the obligation of the witness to testify or in connection with a plea agreement that called for that person testimony possibly in anther jurisdiction Courts have some discretion to fashion custom remedy in unique situation in response to someone contempt of court\n",
            "*************************************************\n",
            "\n",
            "9. Presumably they at least took a report which could make it possible to file an insurance claim for the stolen phone But a good faith belief of law enforcement that is unable to figure out who committed the crime with the resource available to them is a legitimate reason not to investigate and prosecute a crime even in country with legal system based upon the German one where prosecutor have an enforceable legal obligation to prosecute criminal offense known to them A prosecutor cant bring a case unless he know who did it And the police may be wise not to try to investigate a crime that previous experience ha proven to them is a dead end most of the time for a crime of modest economic value Most case of simple larceny are never solved And institutionally the police have to balance the cost of investigating the crime against the seriousness of the crime Murders and kidnapping are almost always going to take priority for police resource over stolen phone particularly if investigating the phone theft may require international cooperation that make the investigation more costly A key point is that the mere fact that a phone is pawned doesnt mean that the person pawning it is necessarily committing a crime so even if you find out where the phone is in some pawn shop possibly in Albania or Turkey by now that doesnt mean that the job is over That person could have bought it innocently and at fair market value from a flea market from someone who could have gotten it from someone who received it innocently a a gift from a friend of a criminal fence who may have bought it not innocently from a true thief In fact because criminal respond to incentive like anyone else it is far more likely that the phone wa swiftly laundered along the line I suggest in this example than it is that it is still in the possession of someone close to the thief But only the fence and the thief would have criminal liability It is a lot harder to solve the crime of a stolen cell phone than you would think and the agency may simply not be able to justify the resource it would take to investigate that case properly to a situation where someone had a phone stole that wa worth maybe 400 Euros in used condition The more you can do to solve the crime the more likely it is that they will find that it is worth further investigating until a thief can be identified and apprehended For example the company with the network that serf the phone might be willing to cooperate with it owner Also the more that you can do to show that this case might crack an entire ring of people involved in a black market in stolen cell phone might make it more attractive to law enforcement\n",
            "*************************************************\n",
            "\n",
            "10. Some general principle without detail or authority which I will look up if I get a chance to cite chapter and verse Civil Cases In The US Person A wrong person B the case end up it court and then for a whole different reason and in a whole different scenario B wrong A in a way which is worthy to make the case end up in court a well Can it possibly be that another and independent case from the first one will be opened up in court or will it influence the reputation and the fate of B winning the first case in which he a victim When A sue B and B ha unrelated claim against A then in common law jurisdiction B ha a choice B can file unrelated counterclaim against A or B can file a separate lawsuit This risk involved in filing a separate lawsuit is that a later judge may decide that what looked like completely different fact to B actually involved a common nucleus of fact in which case the separate lawsuit could be dismissed with prejudice if the first lawsuit produced a final judgment first If counterclaim are filed any judgment for A is setoff against any judgment for B resulting in a single net judgment If separate lawsuit are filed and one produce a judgment for A against B and one produce a judgment for B against A A can use the judgment against B a a credit to pay the judgment for B against A to the full extent possible But this would ordinarily be done via a writ of garnishment rather than via a setoff when the judgment are entered because the judgment will not ordinarily be entered in both case at exactly the same time The outcome of the A v B case will only impact the outcome of the B v A case when there is factual overlap between them in common law jurisdiction Whichever case result in a final judgment on the merit first will bar all claim arising from the same general nucleus of fact that are present in another pending case This is called quotres judicataquot Also the specific conclusion of fact and law reached in the first to be decided case will be controlling a to the conclusion of fact and law necessarily decided to reach the outcome in the first case if those issue are also presented in the second case But since the key issue is when a final judgment is entered not infrequently a simple lawsuit that is filed later will produce a final judgment before a more complicated lawsuit that is filed first I mean can these scenario merge in a single case Most country have a procedure for consolidating case involving the same party under some circumstance In Colorado where I practice there is a simpler procedure if all the case are pending in the same court and another more involved procedure involving a panel of the state supreme court when the case are pending in different court The federal court in the US also have such a process But usually case with the same party will be consolidated only if they involve a common set of fact and circumstance In Belgium and Italy Belgium and Italy should be almost identical on these issue respect but I dont have a deep familiarity with either of them Both have civil code derived from the Napoleons Civil Code a opposed to the moderately different civil code of Germany and Spain almost all of the civil code in the world ha the civil code of one of those three country a a starting point Italy differs more from France than Belgium but it is unlikely that there would be a material difference on this point Criminal Cases In the criminal law any country with jurisdiction over a crime can prosecute it In common law country eg the US England and Wales Scotland Norther Ireland Ireland Canada Australia New Zealand to a lesser extent India Pakistan and Bangladesh and various UK territory the usual rule is that all prosecution by a single government eg the federal government or a particular state government against the same defendant involving a single criminal episode in which multiple crime were committed must be prosecuted in a single case with a single trial for that defendant But if more than one criminal episode is involved each may be brought a a separate criminal case with a separate trial in the respective court with jurisdiction over the place where the crime happened So if there is a car jacking in Denver County a pimping operation in Mesa County and a murder in Garfield County all involving fact independent of each other then there can be three separate case against the defendant in three different county If all of the crime against a single defendant were committed in place that are in the jurisdiction of the same court the prosecution could decide to try all of the outstanding case in a single case with a single trial but the defendant could usually object to this and have the case split up if presenting multiple unrelated charged would prejudice the decision making process on each individual count eg by making the defendant look like a serial offender despite having no prior conviction of any kind The detail above may not be precisely the same in Belgium and Italy but they would be similar In criminal case As wrong to B never offset Bs wrong to A except in the case of affirmative defense such a selfdefense involving the same incident In term of legal theory this is because a criminal case is not brought on behalf of a particular victim of the crime Instead it is brought on behalf of quotThe Peoplequot because that person violated a state or federal criminal law If A criminally victimizes B in the criminal law context A harmed the People once If B criminally victim A in the criminal law context B also harmed the People once Two harm to the People dont cancel out and both can be prosecuted by the prosecuting attorney office usually in different court case if the fact are unrelated This is legal theory would be mostly the same in common law and civil law country Some common law country and some civil law country allow victim of minor crime rather than the state to prosecute these crime in some circumstance but that isnt terribly common in practice even in the minority of jurisdiction where it is permitted And even then two wrong dont make a right and both party who committed criminal wrong can be prosecuted independently of each other This said it wouldnt be terribly uncommon in the US for plea bargain to effectively cancel out criminal charge by dismissing charge against both party when both party committed crime against each other even though this is not recognized a a formal legal rule\n",
            "*************************************************\n",
            "\n",
            "11. In the United States the answer is that B would probably get to decide whether to litigate the new claim separately or a part of the first case When someone A sue B and B sue A back B is bringing what we call a counterclaim In federal court this situation is governed by Rule 13 of the Federal Rules of Civl Procedure the rule are roughly the same in most state court a Compulsory Counterclaim 1 In General A pleading must state a a counterclaim any claim thatat the time of it servicethe pleader ha against an opposing party if the claim A arises out of the transaction or occurrence that is the subject matter of the opposing party claim and B doe not require adding another party over whom the court can not acquire jurisdiction 2 Exceptions The pleader need not state the claim if A when the action wa commenced the claim wa the subject of another pending action or B the opposing party sued on it claim by attachment or other process that did not establish personal jurisdiction over the pleader on that claim and the pleader doe not assert any counterclaim under this rule b Permissive Counterclaim A pleading may state a a counterclaim against an opposing party any claim that is not compulsory The generally rule then is that if As claim and Bs counterclaim are about the same issue B is required to file a counterclaim These are called compulsory counterclaim Besides these B is also permitted to bring claim that are not about the same issue These are called permissive counterclaim Youre asking about a situation where a counterclaim arises for a whole different reason and in a whole different scenario In that case the counterclaim would be considered permissive so most jurisdiction would allow but not require B to present it a part of the litigation that A filed This mean that the two lawsuit could become a single lawsuit or they could be separate lawsuit If they were maintained a separate lawsuit the court should take step to ensure that juror in each case are unaware of the other thus limiting the effect of either case on the others outcome\n",
            "*************************************************\n",
            "\n",
            "12. As stated in the previous reply the police will investigate your claim of committing a crime starting with whatever information you provide to them After their investigation is over usually there would be a preliminary hearing held in order to allow the grand jury to determine whether there is in fact probable cause not guilt for criminal charge If they feel there is enough the grand jury will file an indictment which mean you are formally being charged at that time I will say the card are most definitely stacked against you at this stage of the process The burden of proof is a non issue for the prosecution at these type of hearing since all they need to do is present the fact in such a way that reveals the possibility a crime wa committed which for you translates into a likely prison sentence My advice to you would be to let sleeping dog lie Aside from some type of unspeakable atrocity there not much that would require claiming responsibility and punishment this long after the fact However if you did do something you honestly feel guilty about there only one other soul that can give you peace in this situation and that is your higher power Speak to your Creator from the heart and soul He will relieve you of the suffering youve endured and you will once again feel whole finally knowing all is once again balanced tranquility will once again be your welcome companion\n",
            "*************************************************\n",
            "\n",
            "13. First a Mark Johnson said Second the job of police and prosecutor is not to put people into jail their job is to put guilty people into jail If you go to the police and tell them that you beat up a person then before they investigate they know that either you are guilty of assault or you mistakenly believe that you are guilty of assault or you are a phantasist who enjoys confessing nonexisting crime to the police The police will either investigate which one it is and may prosecute you either for assault or for wasting police time or they may decide based on your behaviour that there wa never any assault and not investigate further I suspect they will at least question you about detail of the claimed assault to decide whether the crime is real or not\n",
            "*************************************************\n",
            "\n",
            "14. In general the police must investigate and based on the result a State Attorney will deside if charge are justified This will then be submitted to a judge who make a final decision The exact process is determined by the relevant jurisdiction\n",
            "*************************************************\n",
            "\n",
            "15. Some example Rubin v Islamic Republic of Iran 583 US ___ 2018 Republic of Austria v Altman 541 US 677 2004 Argentine Rep v Amerada Hess 488 US 428 1989 Note that the Foreign Sovereign Immunities Act precludes a foreign country from being sued except under a narrow set of circumstance so the range of civil case will be limited In fact in Rubin v Iran Austria v Altman and Argentina v Amerada Hess the main question wa whether the FSIA wa applicable and whether foreign country could be sued under any other law The Sudan v Harrison case also touched on whether the condition of the FSIA had been satsfied This answer is community wiki so people are welcome to add more case\n",
            "*************************************************\n",
            "\n"
          ]
        }
      ],
      "source": [
        "# Récupérer les indices des réponses les plus similaires dans le cluster\n",
        "most_similar_indices_in_cluster = cluster_responses['similarity'].nlargest(15).index\n",
        "\n",
        "# Récupérer les réponses recommandées dans une liste\n",
        "recommended_responses = cluster_responses.loc[most_similar_indices_in_cluster, 'body_y'].tolist()\n",
        "\n",
        "# Supprimer les réponses dupliquées tout en préservant l'ordre\n",
        "seen = set()\n",
        "unique_recommended_responses = []\n",
        "for response in recommended_responses:\n",
        "    if response not in seen:\n",
        "        unique_recommended_responses.append(response)\n",
        "        seen.add(response)\n",
        "\n",
        "# Afficher les réponses recommandées sous forme de liste\n",
        "print(\"Les réponses recommandées sont:\\n:\")\n",
        "for i, response in enumerate(unique_recommended_responses, start=1):\n",
        "    print(f\"{i}. {response}\"+\"\\n*************************************************\\n\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "ipdvHgMaQgLS",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "# Convertir les similarités en DataFrame pour une meilleure visualisation\n",
        "similarities_df = pd.DataFrame(cluster_similarities.T, index=data.index, columns=['similarity'])\n",
        "\n",
        "# Ajouter les similarités au DataFrame original\n",
        "data = data.join(similarities_df)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-CBVD_wQQgLS",
        "outputId": "bf4c5cce-e88a-4534-ed39-9ad2528b4add",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "3\n"
          ]
        }
      ],
      "source": [
        "# Identifier le cluster de la question la plus similaire\n",
        "most_similar_question_idx = data['similarity'].idxmax()\n",
        "predicted_cluster = data.loc[most_similar_question_idx, 'cluster']\n",
        "print(predicted_cluster)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cTaYWbTrQgLT",
        "outputId": "1e2e1edc-af34-48a8-ee40-3dffb9fcd6b2",
        "trusted": true
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Les réponses recommandées sont:\n",
            " 0    Generally extraterritorial jurisdiction act a ...\n",
            "1    Extraterritorial jurisdiction will come into p...\n",
            "Name: body_y, dtype: object\n"
          ]
        }
      ],
      "source": [
        "# Sélectionner les réponses des questions du même cluster avec une similarité > 80%\n",
        "recommended_responses = data[(data['cluster'] == predicted_cluster) & (data['similarity'] >= 0.5)][['answer_id', 'body_y']]\n",
        "recommended_answers = pd.DataFrame(recommended_responses).drop_duplicates()\n",
        "\n",
        "print(\"Les réponses recommandées sont:\\n\",recommended_answers['body_y'].head())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 389
        },
        "id": "yBwIO5axQgLT",
        "outputId": "093f9c49-023b-4b70-9074-cd36545ec14e",
        "trusted": true
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>_id_x</th>\n",
              "      <th>question_id</th>\n",
              "      <th>body_x</th>\n",
              "      <th>_id_y</th>\n",
              "      <th>answer_id</th>\n",
              "      <th>score_y</th>\n",
              "      <th>body_y</th>\n",
              "      <th>view_count</th>\n",
              "      <th>is_answered</th>\n",
              "      <th>cluster</th>\n",
              "      <th>similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>664fad975627bd79dd10a4fb</td>\n",
              "      <td>49549</td>\n",
              "      <td>far know country extraterritorial jurisdiction...</td>\n",
              "      <td>664fb02a5627bd79dd1172f2</td>\n",
              "      <td>49597</td>\n",
              "      <td>1</td>\n",
              "      <td>Generally extraterritorial jurisdiction act a ...</td>\n",
              "      <td>77</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>664fad975627bd79dd10a4fb</td>\n",
              "      <td>49549</td>\n",
              "      <td>far know country extraterritorial jurisdiction...</td>\n",
              "      <td>664fb02a5627bd79dd1172fa</td>\n",
              "      <td>49579</td>\n",
              "      <td>0</td>\n",
              "      <td>Extraterritorial jurisdiction will come into p...</td>\n",
              "      <td>77</td>\n",
              "      <td>1</td>\n",
              "      <td>3</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>664fad975627bd79dd10a4fd</td>\n",
              "      <td>50176</td>\n",
              "      <td>baarlehertog baarlenassau international villag...</td>\n",
              "      <td>664fb02a5627bd79dd1171dc</td>\n",
              "      <td>50181</td>\n",
              "      <td>1</td>\n",
              "      <td>The Haskell Free Library and Opera House wa bu...</td>\n",
              "      <td>81</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "      <td>0.027058</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                      _id_x  question_id  \\\n",
              "0  664fad975627bd79dd10a4fb        49549   \n",
              "1  664fad975627bd79dd10a4fb        49549   \n",
              "2  664fad975627bd79dd10a4fd        50176   \n",
              "\n",
              "                                              body_x  \\\n",
              "0  far know country extraterritorial jurisdiction...   \n",
              "1  far know country extraterritorial jurisdiction...   \n",
              "2  baarlehertog baarlenassau international villag...   \n",
              "\n",
              "                      _id_y  answer_id  score_y  \\\n",
              "0  664fb02a5627bd79dd1172f2      49597        1   \n",
              "1  664fb02a5627bd79dd1172fa      49579        0   \n",
              "2  664fb02a5627bd79dd1171dc      50181        1   \n",
              "\n",
              "                                              body_y  view_count  is_answered  \\\n",
              "0  Generally extraterritorial jurisdiction act a ...          77            1   \n",
              "1  Extraterritorial jurisdiction will come into p...          77            1   \n",
              "2  The Haskell Free Library and Opera House wa bu...          81            1   \n",
              "\n",
              "   cluster  similarity  \n",
              "0        3    1.000000  \n",
              "1        3    1.000000  \n",
              "2        5    0.027058  "
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "data.head(3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "q2GtnUluQgLa",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.cluster import KMeans\n",
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "from keras.models import Sequential\n",
        "from keras.layers import Dense\n",
        "from keras.optimizers import Adam"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_s0leLBwQgLa",
        "outputId": "4b073918-899d-479d-ff8d-a9d545fa6ce1",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "# Prétraiter les questions\n",
        "tfidf_vectorizer = TfidfVectorizer(max_features=10000)  # Limiter le nombre de caractéristiques\n",
        "tfidf_matrix = tfidf_vectorizer.fit_transform(data['body_x'])\n",
        "\n",
        "# Appliquer le clustering KMeans\n",
        "n_clusters = best_num_clusters\n",
        "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n",
        "data['cluster'] = kmeans.fit_predict(tfidf_matrix)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {},
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "c:\\Users\\ASUS\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\keras\\src\\layers\\core\\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"
          ]
        }
      ],
      "source": [
        "# Créer et entraîner un modèle Keras\n",
        "input_dim = tfidf_matrix.shape[1]\n",
        "\n",
        "model = Sequential()\n",
        "model.add(Dense(128, input_dim=input_dim, activation='relu'))\n",
        "model.add(Dense(64, activation='relu'))\n",
        "model.add(Dense(best_num_clusters, activation='softmax'))  # n_clusters est le nombre de clusters\n",
        "model.compile(optimizer=Adam(learning_rate=0.001), loss='sparse_categorical_crossentropy', metrics=['accuracy'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 20ms/step - accuracy: 0.8011 - loss: 0.5989 - val_accuracy: 0.9059 - val_loss: 0.2255\n",
            "Epoch 2/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m40s\u001b[0m 21ms/step - accuracy: 0.9958 - loss: 0.0186 - val_accuracy: 0.9071 - val_loss: 0.2631\n",
            "Epoch 3/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 20ms/step - accuracy: 0.9994 - loss: 0.0037 - val_accuracy: 0.9056 - val_loss: 0.3036\n",
            "Epoch 4/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m43s\u001b[0m 20ms/step - accuracy: 0.9996 - loss: 0.0025 - val_accuracy: 0.8981 - val_loss: 0.3947\n",
            "Epoch 5/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m44s\u001b[0m 22ms/step - accuracy: 0.9994 - loss: 0.0024 - val_accuracy: 0.8953 - val_loss: 0.4408\n",
            "Epoch 6/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 21ms/step - accuracy: 0.9992 - loss: 0.0029 - val_accuracy: 0.8944 - val_loss: 0.4757\n",
            "Epoch 7/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m38s\u001b[0m 20ms/step - accuracy: 0.9994 - loss: 0.0013 - val_accuracy: 0.8855 - val_loss: 0.6506\n",
            "Epoch 8/8\n",
            "\u001b[1m1905/1905\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m37s\u001b[0m 20ms/step - accuracy: 1.0000 - loss: 2.3444e-04 - val_accuracy: 0.8864 - val_loss: 0.6325\n"
          ]
        }
      ],
      "source": [
        "# Entraîner le modèle\n",
        "X_train = tfidf_matrix.toarray()\n",
        "y_train = data['cluster'].values\n",
        "history = model.fit(X_train, y_train, epochs=8, batch_size=20, validation_split=0.1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "giCHE89nQgLb",
        "trusted": true
      },
      "outputs": [],
      "source": [
        "from sklearn.metrics.pairwise import cosine_similarity\n",
        "\n",
        "# Fonction pour recommander des réponses avec une similarité supérieure à 50%\n",
        "def recommend_responses(new_question, model, df, tfidf_vectorizer, threshold=0.3, top_n=15):\n",
        "    # Prétraiter la nouvelle question\n",
        "    new_question_vector = tfidf_vectorizer.transform([new_question])\n",
        "\n",
        "    # Prédire le cluster de la nouvelle question\n",
        "    new_question_vector_array = new_question_vector.toarray()\n",
        "    predicted_cluster = np.argmax(model.predict(new_question_vector_array), axis=1)[0]\n",
        "\n",
        "    # Récupérer les questions et réponses du cluster prédit\n",
        "    cluster_questions = df[df['cluster'] == predicted_cluster]\n",
        "\n",
        "    # Calculer la similarité cosinus entre la nouvelle question et les questions du cluster\n",
        "    cluster_question_vectors = tfidf_vectorizer.transform(cluster_questions['body_x'])\n",
        "    similarities = cosine_similarity(new_question_vector, cluster_question_vectors).flatten()\n",
        "\n",
        "    # Filtrer les réponses avec une similarité supérieure au seuil spécifié\n",
        "    high_similarity_indices = [i for i, sim in enumerate(similarities) if sim > threshold]\n",
        "\n",
        "    # Récupérer les réponses recommandées dans une liste\n",
        "    recommended_responses = cluster_questions.iloc[high_similarity_indices]['body_y'].tolist()\n",
        "\n",
        "    # Supprimer les réponses dupliquées tout en préservant l'ordre\n",
        "    seen = set()\n",
        "    unique_recommended_responses = []\n",
        "    for response in recommended_responses:\n",
        "        if response not in seen:\n",
        "            unique_recommended_responses.append(response)\n",
        "            seen.add(response)\n",
        "\n",
        "    return unique_recommended_responses\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 474
        },
        "id": "W8PxlHR0YHD_",
        "outputId": "d03e2c03-9c31-4e26-e94e-391473580f90"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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eHp65pl/sX79+hm+vr7G/v37nfP++usvw8PDw7jwr//VHifnXPfu3eucl56enme9xx57zPD39zfOnTt3yf0tX77cAIx58+a5zG/RooURGhpqnDhxwjlv8+bNhtVqNQYPHuycl/P5PvTQQy7b9+/f36hatapzeteuXYbVajX69+9v2Gw2l3Xtdrvz/bXXXmt06dKlwDqXL19uGIZhZGZmGqGhoUbTpk2Ns2fPOtf79ttvDcAYN26cc15MTIwBGC+//LLLPlu2bGm0atWqoI/GMAzDSEpKMry9vY2+ffu61Pn8888bgMvv4SuvvGIEBAQYO3fudNnHc889Z3h4eBgHDhy45LHq1KljAMZXX33lnJecnGxEREQYLVu2LPJx9u7dawBGUFCQkZSU5LLu+vXrDcCYNWuWy3y73W40aNDA6Nmzp8v5pqenG3Xr1jV69OhxyXOQikeXpcQtpaSkABAYGFio9b///nsAxowZ4zL/73//O8BV9c155JFH8PDwyHfZqFGjXKZHjx7tUs/8+fOx2+0MHDiQ48ePO1/h4eE0aNCA5cuXF3hcm83GkiVL6NevH7Vr13bOb9y4MT179nRZ92qOUxA/Pz/n+zNnznD8+HE6depEeno627dvL/L+jh49yqZNmxgyZAhVqlRxzm/WrBk9evRwfmYXGj58uMt0p06dOHHihPP3Y8GCBdjtdsaNG4fV6vrP4ZUMlf/tt99ISkpi5MiRLn1x+vbtS6NGjfL9Pcqvxj179lzyOMuWLSMzM5PRo0e71Pnkk0/mWXfevHl06tSJkJAQl59t9+7dsdls/PTTT5c9rxo1atC/f3/ndFBQEIMHD+b3338nISHhio4zYMAAqlevftljA2zatIldu3Zx3333ceLECee+09LSuPnmm/npp5/UZ0dc6LKUuKWgoCDA8aVaGPv378dqtVK/fn2X+eHh4VSuXJn9+/dfcS1169YtcFmDBg1cpqOjo7Farc77xezatQvDMPKsl8PLy6vAfR87doyzZ8/mu23Dhg1dwsDVHKcgf/75Jy+++CI//vijM0zkSE5OLvL+cn4GDRs2zLOscePGLFmyJE+H7QtDHUBISAgAp06dIigoiN27d2O1WmnSpEmR6ylqjY0aNWLVqlUu83x9ffN8wYeEhHDq1KlCHefin1f16tWd55hj165d/PHHHwUGiZzO25dSv379PGHvmmuuARx9aMLDw4t8nEv9vbjYrl27AIiJiSlwneTk5DznLhWXwo24paCgIGrUqMHWrVuLtN3V3NiuoE6gF7ZgFPX4drsdi8XCokWL8m39qVSpUtGKLEBxH+f06dN06dKFoKAgXn75ZaKjo/H19WXjxo08++yzpfa/7IJazAzDKJXjX05B9RUnu91Ojx49eOaZZ/JdnhNSSvs4Rfl7kfP78tZbbxU4RLy4/i6Ie1C4Ebd16623MmPGDNauXUv79u0vuW6dOnWw2+3s2rWLxo0bO+cnJiZy+vRplxvIhYSEcPr0aZftMzMzOXr0aJFr3LVrl8v/YOPj47Hb7c6OsdHR0RiGQd26dYv8JVS9enX8/Pyc/+u90I4dO1ymr+Y4+VmxYgUnTpxg/vz5dO7c2Tl/7969V7zPnJ/BxbUDbN++nWrVqhV5mH10dDR2u52//vrrkvdVKWzovbDGm266yWXZjh07iu1GhDn72bVrF/Xq1XPOP3bsWJ5Wn+joaFJTU+nevfsVHy8+Ph7DMFw+h507dwK4/K5e7XEK+pyjo6MBx39armb/UnGoz424rWeeeYaAgACGDRtGYmJinuW7d+/m3XffBaBPnz4AeUZ0vPPOO4Cjz0SO6OjoPP0HZsyYUajhuxebOnWqy/SUKVMA6N27NwB33nknHh4eTJw4MU9rg2EYnDhxosB9e3h40LNnTxYsWMCBAwec87dt28aSJUtc1r2a4xR07Jxtc2RmZvL+++8XaT8XioiIoEWLFnzyyScu4XLr1q388MMPzp9hUfTr1w+r1crLL7+cpzXpwtoDAgLyBNr8tG7dmtDQUKZPn+5yC4FFixaxbds2l9+jq9G9e3e8vLyYMmWKS535jXwaOHAga9euzfMzB0cLW3Z29mWPd+TIEZcRgykpKXz66ae0aNGC8PDwYjtOTji9+LNu1aoV0dHRTJo0idTU1DzbHTt27LL7lopFLTfitqKjo5kzZw6DBg2icePGLncoXrNmDfPmzXPel6Z58+bExMQwY8YM5yWVdevW8cknn9CvXz+6devm3O+wYcMYPnw4AwYMoEePHmzevJklS5ZQrVq1Ite4d+9ebr/9dnr16sXatWv5/PPPue+++2jevLnzHF599VXGjh3Lvn376NevH4GBgezdu5evv/6aRx99lKeffrrA/U+cOJHFixfTqVMnRo4cSXZ2NlOmTOHaa6/ljz/+cPmsruY4F+vQoQMhISHExMTwt7/9DYvFwmeffXbVl4PeeustevfuTfv27Xn44YedQ8GDg4PzvffQ5dSvX58XXniBV155hU6dOnHnnXfi4+PD+vXrqVGjBrGxsYDjy3XatGm8+uqr1K9fn9DQ0DwtM+Dom/Tmm28ydOhQunTpwr333uscCh4VFcVTTz11VeefI+d+OLGxsdx666306dOH33//nUWLFuX5PfzHP/7BwoULufXWWxkyZAitWrUiLS2NLVu28OWXX7Jv377L/u5ec801PPzww6xfv56wsDBmzpxJYmIis2bNKtbjREdHU7lyZaZPn05gYCABAQG0a9eOunXr8tFHH9G7d2+uvfZahg4dSs2aNTl8+DDLly8nKCiI//3vf1f+gYr7MWOIlkhp2rlzp/HII48YUVFRhre3txEYGGh07NjRmDJlisuQ5KysLGPixIlG3bp1DS8vLyMyMtIYO3ZsnmHLNpvNePbZZ41q1aoZ/v7+Rs+ePY34+PgCh4KvX78+T005Q5X/+usv46677jICAwONkJAQ4/HHH3cZQpzjq6++Mm688UYjICDACAgIMBo1amSMGjXK2LFjx2XPf+XKlUarVq0Mb29vo169esb06dOdxy+u4+Q3FHz16tXGDTfcYPj5+Rk1atQwnnnmGWPJkiUuQ6cLUtBQcMMwjGXLlhkdO3Y0/Pz8jKCgIOO2224z/vrrL5d1cs7v2LFjl63TMAxj5syZRsuWLQ0fHx8jJCTE6NKli7F06VLn8oSEBKNv375GYGCgATiHhV88FDzH3LlznfurUqWKcf/99xuHDh1yWScmJsYICAjIc34F/WwuZrPZjIkTJxoRERGGn5+f0bVrV2Pr1q15fg8NwzDOnDljjB071qhfv77h7e1tVKtWzejQoYMxadIkIzMz85LHqVOnjtG3b19jyZIlRrNmzQwfHx+jUaNG+f5sCnOcnKHgb731Vr7H++abb4wmTZoYnp6eeYaF//7778add95pVK1a1fDx8THq1KljDBw40IiLi7vs5yUVi8UwykjPOhERKXOioqJo2rQp3377rdmliBSa+tyIiIiIW1G4EREREbeicCMiIiJuRX1uRERExK2o5UZERETcisKNiIiIuJUKdxM/u93OkSNHCAwMvKrnCImIiEjpMQyDM2fOUKNGDazWS7fN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ffp0vvvuO2bOnMlzzz2XZ/2ZM2dy8uRJ1qxZg5eX44mjUVFRJVukl7+jBcUMXkXr0Pvwww8zevRopk6dyqxZs4iOjqZLly68+eabvPvuu0yePJnrrruOgIAAnnzySTIzM4ut1LVr13L//fczceJEevbsSXBwMF988QVvv/12sR3jQjk//xwWiwW73V4ixxKRCmDVO3DwF/AO1LBvN2Bay01mZiYbNmyge/fuucVYrXTv3p21a9fmu83ChQtp3749o0aNIiwsjKZNm/L6669js9kKPE5GRgYpKSkuryKxWByXhsx4FaK/zYUGDhyI1Wplzpw5fPrppzz00ENYLBZWr17NHXfcwQMPPEDz5s2pV68eO3fuLPR+GzduzMGDBzl69Khz3i+//OKyzpo1a6hTpw4vvPACrVu3pkGDBuzfv99lHW9v70v+rHKOtXnzZtLS0pzzVq9ejdVqpWHDhoWuWUSk0A6uhxVvON73nVQmnmotV8e0cHP8+HFsNpuzD0WOsLAwEhIS8t1mz549fPnll9hsNr7//nteeukl3n77bV599dUCjxMbG0twcLDzFRnpvo+or1SpEoMGDWLs2LEcPXqUIUOGANCgQQOWLl3KmjVr2LZtG4899hiJiYmF3m/37t255ppriImJYfPmzfz888+88MILLus0aNCAAwcO8MUXX7B7927+/e9/8/XXX7usExUVxd69e9m0aRPHjx8nIyMjz7Huv/9+fH19iYmJYevWrSxfvpzRo0fz4IMP5vldERG5as5h3zZoehc0G2R2RVIMytVQcLvdTmhoKDNmzKBVq1YMGjSIF154genTpxe4zdixY0lOTna+Dh48WIoVl76HH36YU6dO0bNnT2cfmRdffJHrr7+enj170rVrV8LDw+nXr1+h92m1Wvn66685e/Ysbdu2ZdiwYbz22msu69x+++089dRTPP7447Ro0YI1a9bw0ksvuawzYMAAevXqRbdu3ahevXq+w9H9/f1ZsmQJJ0+epE2bNtx1113cfPPNvPfee0X/MERELmfRs47nRwXXhr5vF7nFXMomi2EYhhkHzszMxN/fny+//NLlizYmJobTp0/zzTff5NmmS5cueHl5OYcSAyxatIg+ffqQkZGBt7f3ZY+bkpJCcHAwycnJBAW5Ptn13Llz7N27l7p16+Lr63vlJycVln6HRMqRrV/Blw85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",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Tracer la courbe de la fonction de perte\n",
        "plt.plot(history.history['loss'], label='Entraînement')\n",
        "plt.plot(history.history['val_loss'], label='Validation')\n",
        "plt.title('Courbe de la fonction de perte')\n",
        "plt.xlabel('Épochs')\n",
        "plt.ylabel('Perte')\n",
        "plt.legend()\n",
        "plt.savefig('loss_plot.png')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u001b[1m1361/1361\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m7s\u001b[0m 5ms/step\n"
          ]
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
        "\n",
        "y_pred = model.predict(X_train)\n",
        "y_pred_clusters = np.argmax(y_pred, axis=1)\n",
        "\n",
        "# Calculer la matrice de confusion\n",
        "conf_matrix = confusion_matrix(y_train, y_pred_clusters)\n",
        "disp = ConfusionMatrixDisplay(confusion_matrix=conf_matrix)\n",
        "disp.plot(cmap=plt.cm.Blues)\n",
        "\n",
        "# Afficher la matrice de confusion\n",
        "plt.title('Matrice de Confusion')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {},
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 39ms/step\n",
            "Recommended responses:\n",
            "1. Generally extraterritorial jurisdiction act a a backup If the Italian court want to prosecute the US will not claim jurisdiction And if the Italians do not want to prosecute theyre unlikely to extradite the offender either Now for physical crime the location of the act make it generally obvious which jurisdiction take precedence but for online crime this can be le transparent but a country that ha arrested the offender and want to try the crime probably still get precedence\n",
            "2. Extraterritorial jurisdiction will come into play only for certain citizen in other country For example military personnel stationed in another ally country may or may not be subject to local law for all offense This will be set by agreement between the two nation There are certainly law that apply to US citizen even when they are abroad There are also US law that are used to enforce antiterrorism measure across the globe though that enforcement is generally via military might However there are no law that affect foreign national in their home country for normal criminal offense Moreover very few sovereign nation would allow a foreign court authority over their citizen for event that occur within it border In your example the only jurisdiction is the appropriate one in Italy It is possible that there have been instance of defendant being sent outside of a country for trial but this would be a diplomatic solution not a jurisdictional one\n"
          ]
        }
      ],
      "source": [
        "# Obtenir les réponses recommandées\n",
        "recommended_responses = recommend_responses(user_question, model, data, tfidf_vectorizer)\n",
        "\n",
        "# Afficher les réponses recommandées sous forme de liste\n",
        "print(\"Recommended responses:\")\n",
        "for i, response in enumerate(recommended_responses, start=1):\n",
        "    print(f\"{i}. {response}\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {},
      "outputs": [],
      "source": [
        "recommended_responses = pd.DataFrame(recommended_responses, columns=['Answers'])\n",
        "recommended_responses.rename(columns={'0': 'Answers'}, inplace=True)\n",
        "\n",
        "data.to_csv('data.csv')\n",
        "recommended_responses.to_csv('recommendations.csv', index= False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {},
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Answers</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [Answers]\n",
              "Index: []"
            ]
          },
          "execution_count": 52,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "recommended_responses.head(2)"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "gpuType": "T4",
      "name": "dask_model",
      "provenance": []
    },
    "kaggle": {
      "accelerator": "nvidiaTeslaT4",
      "dataSources": [
        {
          "datasetId": 5038318,
          "sourceId": 8453846,
          "sourceType": "datasetVersion"
        }
      ],
      "dockerImageVersionId": 30700,
      "isGpuEnabled": true,
      "isInternetEnabled": true,
      "language": "python",
      "sourceType": "notebook"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.2"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
